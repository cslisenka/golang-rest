---
apiVersion: v1
kind: ConfigMap
metadata:
  name: golang-rest-envoy
  namespace: default
data:
  envoy.yaml: >
    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address: { address: 0.0.0.0, port_value: 9901 }
        
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: local
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: local_service
              http_filters:
              - name: envoy.filters.http.router
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 10001
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: ingress_http
              route_config:
                name: elasticsearch
                virtual_hosts:
                - name: elasticsearch
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: elasticsearch
              http_filters:
              - name: envoy.filters.http.router          

      clusters:
      - name: local_service
        connect_timeout: 2s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: local_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 9090
      - name: elasticsearch
        connect_timeout: 2s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: elasticsearch
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: elasticsearch-service
                    port_value: 9200
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  labels:
    app: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
        env:
        - name: discovery.type
          value: single-node
        ports:
        - containerPort: 9200
        - containerPort: 9300
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-service
spec:
  selector:
    app: elasticsearch
  ports:
  - port: 9200
    protocol: TCP
    targetPort: 9200
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: golang-rest-deployment
  labels:
    app: golang-rest
spec:
  replicas: 3
  selector:
    matchLabels:
      app: golang-rest
  template:
    metadata:
      labels:
        app: golang-rest
    spec:
      containers:
      - name: golang-rest
        image: golang-rest:1.0
        env:
        # instead of connection directly to elastic search we go thru sidecar
        #- name: ELASTIC_HOST
        #  value: elasticsearch-service
        #- name: ELASTIC_PORT
        #  value: '9200'
        - name: ELASTIC_HOST
          value: 127.0.0.1
        - name: ELASTIC_PORT
          value: '10001'
        # no need to expose port as all connections go thru sidecar
        #ports:
        #- containerPort: 9090
      - name: golang-rest-envoy
        image: envoyproxy/envoy-dev:latest
        command: ["envoy"]
        args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: envoy-yaml
          mountPath: /etc/envoy.yaml
          subPath: envoy.yaml              
        ports:
        - containerPort: 10001
        - containerPort: 10000
        - containerPort: 9901        
      volumes:
      - name: envoy-yaml
        configMap:
          name: golang-rest-envoy                  
---
apiVersion: v1
kind: Service
metadata:
  name: golang-rest-service
spec:
  selector:
    app: golang-rest
  ports:
  - nodePort: 30090
    port: 10000
    protocol: TCP
    targetPort: 10000
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: envoy-admin-service
spec:
  selector:
    app: golang-rest
  ports:
  - nodePort: 30091
    port: 9901
    protocol: TCP
    targetPort: 9901
  type: NodePort  